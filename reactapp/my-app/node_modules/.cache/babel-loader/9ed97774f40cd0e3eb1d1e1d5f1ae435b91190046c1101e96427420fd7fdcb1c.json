{"ast":null,"code":"export const getUsers = async () => {\n  e.preventDefault();\n  try {\n    const response = await fetch('http://localhost:5000/users');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    // @ts-ignore\n    throw new Error(`Error fetching users: ${error.message}`);\n  }\n};\nexport const addUser = async user => {\n  try {\n    const response = await fetch('http://localhost:5000/users/adduser', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    // @ts-ignore\n    throw new Error(`Error adding user: ${error.message}`);\n  }\n};","map":{"version":3,"names":["getUsers","e","preventDefault","response","fetch","ok","Error","json","error","message","addUser","user","method","headers","body","JSON","stringify"],"sources":["/Users/mennokonijn/WebstormProjects/spa-performance/reactapp/my-app/src/users/user.service.ts"],"sourcesContent":["import {User, UserObject} from \"./users\";\n\nexport const getUsers = async (): Promise<UserObject> => {\n    e.preventDefault();\n    try {\n        const response = await fetch('http://localhost:5000/users');\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return await response.json();\n    } catch (error) {\n        // @ts-ignore\n        throw new Error(`Error fetching users: ${error.message}`);\n    }\n};\n\nexport const addUser = async (user: User) => {\n    try {\n        const response = await fetch('http://localhost:5000/users/adduser', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(user),\n        });\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        return await response.json();\n    } catch (error) {\n        // @ts-ignore\n        throw new Error(`Error adding user: ${error.message}`);\n    }\n};"],"mappings":"AAEA,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAA,KAAiC;EACrDC,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIF,KAAK,CAAE,yBAAwBE,KAAK,CAACC,OAAQ,EAAC,CAAC;EAC7D;AACJ,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAOC,IAAU,IAAK;EACzC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAChEQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC7B,CAAC,CAAC;IACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ;IACA,MAAM,IAAIF,KAAK,CAAE,sBAAqBE,KAAK,CAACC,OAAQ,EAAC,CAAC;EAC1D;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}